// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractMembership

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IMembershipMsgsCommitmentProof is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsCommitmentProof struct {
	ProofType         uint8
	ExistenceProof    IMembershipMsgsExistenceProof
	NonExistenceProof IMembershipMsgsNonExistenceProof
}

// IMembershipMsgsExistenceProof is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsExistenceProof struct {
	Key   []byte
	Value [32]byte
	Leaf  IMembershipMsgsLeafOp
	Path  []IMembershipMsgsInnerOp
}

// IMembershipMsgsInnerOp is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsInnerOp struct {
	HashOp uint8
	Prefix []byte
	Suffix []byte
}

// IMembershipMsgsInnerSpec is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsInnerSpec struct {
	ChildOrder      []uint32
	ChildSize       uint32
	MinPrefixLength uint32
	MaxPrefixLength uint32
	EmptyChild      []byte
	HashOp          uint8
}

// IMembershipMsgsKVPair is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsKVPair struct {
	Path  [][]byte
	Value [32]byte
}

// IMembershipMsgsLeafOp is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsLeafOp struct {
	HashOp       uint8
	PrehashKey   uint8
	PrehashValue uint8
	Prefix       []byte
}

// IMembershipMsgsMembershipOutput is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsMembershipOutput struct {
	CommitmentRoot [32]byte
	KvPairs        []IMembershipMsgsKVPair
}

// IMembershipMsgsMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsMerkleProof struct {
	Proofs []IMembershipMsgsCommitmentProof
}

// IMembershipMsgsNonExistenceProof is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsNonExistenceProof struct {
	Key      []byte
	HasLeft  bool
	Left     IMembershipMsgsExistenceProof
	HasRight bool
	Right    IMembershipMsgsExistenceProof
}

// IMembershipMsgsProofSpec is an auto generated low-level Go binding around an user-defined struct.
type IMembershipMsgsProofSpec struct {
	SpecType                   uint8
	HasLeafSpec                bool
	LeafOp                     IMembershipMsgsLeafOp
	HasInnerSpec               bool
	InnerSpec                  IMembershipMsgsInnerSpec
	MinDepth                   uint32
	MaxDepth                   uint32
	PrehashKeyBeforeComparison bool
}

// ContractMembershipMetaData contains all meta data concerning the ContractMembership contract.
var ContractMembershipMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"compareBytes\",\"inputs\":[{\"name\":\"a\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"b\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"int8\",\"internalType\":\"int8\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"getSlice\",\"inputs\":[{\"name\":\"array\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"from\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"iavlSpec\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ProofSpec\",\"components\":[{\"name\":\"specType\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.SpecType\"},{\"name\":\"hasLeafSpec\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"leafOp\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"hasInnerSpec\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"innerSpec\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.InnerSpec\",\"components\":[{\"name\":\"childOrder\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"childSize\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"minPrefixLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxPrefixLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"emptyChild\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"}]},{\"name\":\"minDepth\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxDepth\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"prehashKeyBeforeComparison\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"membership\",\"inputs\":[{\"name\":\"appHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"kvPairs\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.KVPair[]\",\"components\":[{\"name\":\"path\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"merkleProofs\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.MerkleProof[]\",\"components\":[{\"name\":\"proofs\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.CommitmentProof[]\",\"components\":[{\"name\":\"proofType\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.ProofType\"},{\"name\":\"existenceProof\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ExistenceProof\",\"components\":[{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"leaf\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"path\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.InnerOp[]\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"suffix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]},{\"name\":\"nonExistenceProof\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.NonExistenceProof\",\"components\":[{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hasLeft\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"left\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ExistenceProof\",\"components\":[{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"leaf\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"path\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.InnerOp[]\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"suffix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]},{\"name\":\"hasRight\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"right\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ExistenceProof\",\"components\":[{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"leaf\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"path\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.InnerOp[]\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"suffix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]}]}]}]}],\"outputs\":[{\"name\":\"output\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.MembershipOutput\",\"components\":[{\"name\":\"commitmentRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"kvPairs\",\"type\":\"tuple[]\",\"internalType\":\"structIMembershipMsgs.KVPair[]\",\"components\":[{\"name\":\"path\",\"type\":\"bytes[]\",\"internalType\":\"bytes[]\"},{\"name\":\"value\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tendermintSpec\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.ProofSpec\",\"components\":[{\"name\":\"specType\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.SpecType\"},{\"name\":\"hasLeafSpec\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"leafOp\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.LeafOp\",\"components\":[{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashKey\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prehashValue\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"hasInnerSpec\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"innerSpec\",\"type\":\"tuple\",\"internalType\":\"structIMembershipMsgs.InnerSpec\",\"components\":[{\"name\":\"childOrder\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"childSize\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"minPrefixLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxPrefixLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"emptyChild\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"hashOp\",\"type\":\"uint8\",\"internalType\":\"enumIMembershipMsgs.HashOp\"}]},{\"name\":\"minDepth\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"maxDepth\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"prehashKeyBeforeComparison\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"pure\"},{\"type\":\"event\",\"name\":\"MembershipVerified\",\"inputs\":[{\"name\":\"commitmentRoot\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"pairsCount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NonMembershipVerified\",\"inputs\":[{\"name\":\"commitmentRoot\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes[]\",\"indexed\":false,\"internalType\":\"bytes[]\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"BranchNotFound\",\"inputs\":[{\"name\":\"branch\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"EmptyRequest\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedToVerifyMembership\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InputDataMissing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidExistenceProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidMerkleProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidOffset\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidVarint\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MismatchedNumberOfProofs\",\"inputs\":[{\"name\":\"expected\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"actual\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"MissingLeafSpec\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MissingMerkleProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MissingMerkleRoot\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MissingVerifiedValue\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ProvidedKeyValueMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"RootMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"VerificationMembershipFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"VerificationNonMembershipFailed\",\"inputs\":[]}]",
	Bin: "0x60808060405234601557612cd7908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80622cf8c01461022e57806313542b7a1461005e5780635bf145a214610059578063d259183d146100545763f7b075a81461004f575f80fd5b610d14565b610c8f565b610b70565b3461012d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012d5760243560043567ffffffffffffffff821161012d573660238301121561012d5781600401356100bb816105ba565b926100c96040519485610549565b8184526024602085019260051b8201019036821161012d5760248101925b82841061013157856044358667ffffffffffffffff821161012d576101299261011761011d933690600401610836565b91611001565b60405191829182610abc565b0390f35b5f80fd5b833567ffffffffffffffff811161012d57820160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc823603011261012d576040519061017d826104f4565b602481013567ffffffffffffffff811161012d5760249082010136601f8201121561012d5780356101ad816105ba565b916101bb6040519384610549565b81835260208084019260051b8201019036821161012d5760208101925b8284106101ff575050505091604460209492859483520135838201528152019301926100e7565b833567ffffffffffffffff811161012d5760209161022383928336918701016105ee565b8152019301926101d8565b3461012d575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012d57610129610267610e8b565b604051918291826103d7565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600211156102aa57565b610273565b600311156102aa57565b9060038210156102aa5752565b90601f19601f602080948051918291828752018686015e5f8582860101520116010190565b9060806060610333936102ff8482516102b9565b610311602082015160208601906102b9565b610323604082015160408601906102b9565b01519181606082015201906102c6565b90565b9060c0810182519060c083528151809152602060e084019201905f5b8181106103bb575050509060a0806103b06103339461037e6020880151602087019063ffffffff169052565b60408781015163ffffffff169086015260608781015163ffffffff1690860152608087015185820360808701526102c6565b9401519101906102b9565b825163ffffffff16845260209384019390920191600101610352565b610333906020815282516103ea816102a0565b60208201526104026020840151604083019015159052565b61010060e061044561042360408701518460608701526101208601906102eb565b6060870151151560808601526080870151601f198683030160a0870152610336565b60a086015163ffffffff1660c08501529460c081015163ffffffff168483015201511515910152565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6080810190811067ffffffffffffffff8211176104b757604052565b61046e565b6060810190811067ffffffffffffffff8211176104b757604052565b6020810190811067ffffffffffffffff8211176104b757604052565b6040810190811067ffffffffffffffff8211176104b757604052565b610100810190811067ffffffffffffffff8211176104b757604052565b60c0810190811067ffffffffffffffff8211176104b757604052565b90601f601f19910116810190811067ffffffffffffffff8211176104b757604052565b6040519061057b60a083610549565b565b6040519061057b608083610549565b6040519061057b60c083610549565b6040519061057b61010083610549565b6040519061057b604083610549565b67ffffffffffffffff81116104b75760051b60200190565b67ffffffffffffffff81116104b757601f01601f191660200190565b81601f8201121561012d57803590610605826105d2565b926106136040519485610549565b8284526020838301011161012d57815f926020809301838601378301015290565b3590600382101561012d57565b919060808382031261012d576040519061065a8261049b565b819361066581610634565b835261067360208201610634565b602084015261068460408201610634565b604084015260608101359167ffffffffffffffff831161012d576060926106ab92016105ee565b910152565b9080601f8301121561012d578135916106c8836105ba565b926106d66040519485610549565b80845260208085019160051b8301019183831161012d5760208101915b83831061070257505050505090565b823567ffffffffffffffff811161012d578201906060601f19838803011261012d5760405190610731826104bc565b61073d60208401610634565b8252604083013567ffffffffffffffff811161012d57876020610762928601016105ee565b602083015260608301359167ffffffffffffffff831161012d5761078e886020809695819601016105ee565b60408201528152019201916106f3565b919060808382031261012d57604051906107b78261049b565b8193803567ffffffffffffffff811161012d57826107d69183016105ee565b835260208101356020840152604081013567ffffffffffffffff811161012d5782610802918301610641565b604084015260608101359167ffffffffffffffff831161012d576060926106ab92016106b0565b3590811515820361012d57565b9080601f8301121561012d5781359161084e836105ba565b9261085c6040519485610549565b80845260208085019160051b8301019183831161012d5760208101915b83831061088857505050505090565b823567ffffffffffffffff811161012d5782016020601f19828803011261012d57604051906108b6826104d8565b602081013567ffffffffffffffff811161012d57602091010186601f8201121561012d578035906108e6826105ba565b916108f46040519384610549565b80835260208084019160051b8301019189831161012d5760208101915b83831061092d5750505090825250815260209283019201610879565b82359067ffffffffffffffff821161012d576060601f198d938501809403011261012d576040519061095e826104bc565b6020830135600281101561012d578252604083013567ffffffffffffffff811161012d578d60206109919286010161079e565b6020830152606083013567ffffffffffffffff811161012d57602060a0918f9501018094031261012d576109c361056c565b91833567ffffffffffffffff811161012d578e6109e19186016105ee565b83526109ef60208501610829565b6020840152604084013567ffffffffffffffff811161012d578e610a1491860161079e565b6040840152610a2560608501610829565b606084015260808401359267ffffffffffffffff841161012d57610a4f8f6020969587960161079e565b60808201526040820152815201920191610911565b9080602083519182815201916020808360051b8301019401925f915b838310610a8f57505050505090565b9091929394602080610aad83601f19866001960301875289516102c6565b97019301930191939290610a80565b602081526020606082019280518284015201519160408083015282518091526080820191602060808360051b8301019401925f915b838310610b0057505050505090565b9091929394602080827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085600195030186528851908280610b4a8451604085526040850190610a64565b93015191015297019301930191939290610af1565b9060206103339281815201906102c6565b3461012d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012d5760043567ffffffffffffffff811161012d57610bbf9036906004016105ee565b60243560443591828211610c4b5780518311610c0757610be2826101299461119f565b90816020610bef826111d1565b9481860193010160045afa5060405191829182610b5f565b606460405162461bcd60e51b815260206004820152601a60248201527f52616e67652065786365656473206172726179206c656e6774680000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601860248201527f496e76616c69642072616e67653a2066726f6d203e20746f00000000000000006044820152fd5b3461012d5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012d5760043567ffffffffffffffff811161012d57610cde9036906004016105ee565b60243567ffffffffffffffff811161012d57602091610d04610d0a9236906004016105ee565b90611236565b604051905f0b8152f35b3461012d575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012d5761012961026761142f565b60405190610d5a82610510565b5f60e083828152826020820152604051610d738161049b565b8381528360208201528360408201526060808201526040820152826060820152604051610d9f8161052d565b60608152836020820152836040820152836060820152606060808201528360a082015260808201528260a08201528260c08201520152565b60405190610de6602083610549565b5f8252565b60405190610dfa604083610549565b600182525f6020830152565b60405160609190610e178382610549565b6002815291601f1901366020840137565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b805115610e625760200190565b610e28565b805160011015610e625760400190565b8051821015610e625760209160051b010190565b610e93610d4d565b50610e9c61057d565b600181525f602082015260016040820152610eb5610deb565b6060820152610ec2610e06565b5f610ecc82610e55565b52610edf610ed982610e67565b60019052565b610ee761058c565b9081526020808201526001604082015260016060820152610f06610dd7565b6080820152600160a0820152610f1a61059b565b6001815291600160208401525b60408301526001606083015260808201525f60a08201525f60c08201525f60e082015290565b60405190610f5a826104f4565b60606020835f81520152565b90610f70826105ba565b610f7d6040519182610549565b828152601f19610f8d82946105ba565b01905f5b828110610f9d57505050565b602090604051610fac816104f4565b606081525f8382015282828501015201610f91565b60405160609190610fd28382610549565b6002815291601f1901825f5b828110610fea57505050565b602090610ff5610d4d565b82828501015201610fde565b9291909261100d610f4d565b5083511561113757835182510361110f576110288451610f66565b935f5b81518110156110ba578061104160019284610e77565b5161109e61104f8388610e77565b51611058610fc1565b61106061142f565b61106982610e55565b5261107381610e55565b5061107c610e8b565b61108582610e67565b5261108f81610e67565b508351886020860151926114c9565b6110a88289610e77565b526110b38188610e77565b500161102b565b507f14c3312724f47bdf554a477e7a78122467e13c3f6d0e07ce1ef28a65f231c1d9919250611109909493946110ee6105ab565b94848652602086015251604051918291829190602083019252565b0390a290565b7f947d5a84000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f5c220902000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b905f19820191821161119a57565b61115f565b9190820391821161119a57565b604080519091906111bd8382610549565b60208152918290601f190190369060200137565b906111db826105d2565b6111e86040519182610549565b828152601f196111f882946105d2565b0190602036910137565b9081518111610c0757611214816111d1565b91816020808501920160045afa5090565b908151811015610e62570160200190565b8051825180820361135c57505090815160208301208151602083012014611356575f5b825181101561134f5761129561126f8285611225565b517fff000000000000000000000000000000000000000000000000000000000000001690565b7fff000000000000000000000000000000000000000000000000000000000000006112eb6112c661126f8587611225565b7fff000000000000000000000000000000000000000000000000000000000000001690565b911610611347576112ff61126f8285611225565b7fff000000000000000000000000000000000000000000000000000000000000006113306112c661126f8587611225565b91161161133f57600101611259565b505050600190565b5050505f1990565b5050505f90565b50505f90565b8082101561142857505b5f5b818110611384575050519051111561137f575f1990565b600190565b61139161126f8285611225565b7fff000000000000000000000000000000000000000000000000000000000000006113c26112c661126f8589611225565b91161061141f576113d661126f8285611225565b7fff000000000000000000000000000000000000000000000000000000000000006114076112c661126f8589611225565b91161161141657600101611368565b50505050600190565b505050505f1990565b9050611366565b611437610d4d565b5061144061057d565b600181525f602082015260016040820152611459610deb565b6060820152611466610e06565b5f61147082610e55565b5261147d610ed982610e67565b61148561058c565b9081526021602082015260046040820152600c60608201526114a5610dd7565b6080820152600160a08201526114b961059b565b5f81526001602082015291610f27565b94939091948151511561169457821561166c5781515195815187810361163c5750805187810361163c57508051859392915f915b89831061158c5750505050505061155e9293506040516115388161152a6020820194859190602083019252565b03601f198101835282610549565b519020906040516115568161152a6020820194859190602083019252565b519020141590565b61156457565b7f5417b453000000000000000000000000000000000000000000000000000000005f5260045ffd5b909192939496506115ae6115a86115a3858461119f565b61118c565b83610e77565b51966115bb848751610e77565b5180516115c7816102a0565b6115d0816102a0565b611614576116029160206115fe9201996115ea8b516116bc565b809b516115f7898b610e77565b519061174b565b1590565b611564578694939260010191906114fd565b7fb05e92fa000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9a177708000000000000000000000000000000000000000000000000000000005f52600452602487905260445ffd5b7ff17ca146000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fc2e87803000000000000000000000000000000000000000000000000000000005f5260045ffd5b90815151158015611744575b61171c576116e160408301518351602085015191611901565b905f915b606084015180518410156117155761170b60609261170586600194610e77565b516119b0565b93019290506116e5565b5092509050565b7f01e3bc0a000000000000000000000000000000000000000000000000000000005f5260045ffd5b505f6116c8565b929390919361175a8385611a9e565b83516040516117718161152a602082019485610b5f565b5190209060405161178a8161152a602082019485610b5f565b519020149081159161183a575b50611812576117a5916122ad565b6040516117bf8161152a6020820194859190602083019252565b519020906040516117dd8161152a6020820194859190602083019252565b519020036117ea57600190565b7f5ade0455000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fdd2ccd03000000000000000000000000000000000000000000000000000000005f5260045ffd5b9050602083015114155f611797565b5160038110156102aa5790565b906001820180921161119a57565b906002820180921161119a57565b906003820180921161119a57565b906004820180921161119a57565b906005820180921161119a57565b906006820180921161119a57565b906007820180921161119a57565b906008820180921161119a57565b906009820180921161119a57565b90600a820180921161119a57565b9190820180921161119a57565b805191908290602001825e015f815290565b919091606081015160208201519060038210156102aa5761194161192b61193b9661194f946123d5565b60405196879360208501906118ef565b906118ef565b03601f198101855284610549565b6119576111ac565b916020830152604081015160038110156102aa576103339361199261198261193b956119a0946123d5565b60405195869360208501906118ef565b03601f198101845283610549565b51906119ab826102af565b612448565b9080156119ec57816119a06119e2926119926020610333960151916020604086015191604051978895838701906118ef565b90815201906118ef565b606460405162461bcd60e51b815260206004820152601260248201527f6d697373696e67206368696c64206861736800000000000000000000000000006044820152fd5b9063ffffffff8091169116029063ffffffff821691820361119a57565b9063ffffffff8091169116019063ffffffff821161119a57565b8115611a71570690565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b90611aaf6115fe6020830151151590565b612285576040820191606083510151928251611aca816102a0565b611ad3816102a0565b15612232575b516040830190611ae98251611849565b815190611af5826102af565b611afe826102af565b611b07816102af565b036121ed57611b196020835101611849565b602082015190611b28826102af565b611b31826102af565b611b3a816102af565b03612182576040611b4d81845101611849565b91015190611b5a826102af565b611b63826102af565b611b6c816102af565b03612117576060905101519283518151109081156120d1575b50611e365760a082015163ffffffff1680612012575b508151611ba7816102a0565b611bb0816102a0565b15611bba57505050565b60600191825151925f5b848110611bd2575050505050565b611bea6020611be2838551610e77565b5101516124fb565b611bf5828451610e77565b519080611f49575b5050611c0f6115fe6060860151151590565b611f0457611c1e818351610e77565b5160808501611c3060a0825101611849565b825190611c3c826102af565b611c45826102af565b611c4e816102af565b03611ebf5784516020830190815151108015611e7b575b611e3657805151825160400151611c869063ffffffff165b63ffffffff1690565b11611df157611cd2611c7d611cb5611ca3611c7d8651515161118c565b85516020015163ffffffff1690611a30565b92515192611ccc606086510163ffffffff90511690565b90611a4d565b10611dac57805160200151611cec9063ffffffff16611c7d565b15611d6757611d10611c7d60206040611d169501515193510163ffffffff90511690565b90611a67565b611d2257600101611bc4565b60405162461bcd60e51b815260206004820152601660248201527f496e6e657220737566666978206d616c666f726d6564000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e6e6572206368696c642073697a65206d757374203e3d31000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527f496e6e65722070726566697820746f6f206c6f6e6700000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527f496e6e65722070726566697820746f6f2073686f7274000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e636f727265637420707265666978206f6e206c65616600000000000000006044820152606490fd5b50611eba6040516020810190611e958161152a8b85610b5f565b519020611ea58351895190611202565b6040516115568161152a602082019485610b5f565b611c65565b60405162461bcd60e51b815260206004820152601f60248201527f556e657870656374656420696e6e65722068617368206f7065726174696f6e006044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527f496e6e65725370656320697320726571756972656400000000000000000000006044820152606490fd5b60018114159081612006575b50611fc15760019051611f67816102af565b611f70816102af565b03611f7c575f80611bfd565b60405162461bcd60e51b815260206004820152601260248201527f6261642068617368206f7065726174696f6e00000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527f6261642070726566697820696e20696e6e6572206f70000000000000000000006044820152606490fd5b6022915014155f611f55565b60608201805151909163ffffffff161161208c57515161203c611c7d60c085015163ffffffff1690565b10612047575f611b9b565b60405162461bcd60e51b815260206004820152601160248201527f546f6f206d616e7920496e6e65724f70730000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201527f546f6f2066657720496e6e65724f7073000000000000000000000000000000006044820152606490fd5b90506120f860405160208101906120ec8161152a8985610b5f565b51902091855190611202565b60405161210d8161152a602082019485610b5f565b519020145f611b85565b60405162461bcd60e51b815260206004820152602760248201527f556e6578706563746564206c65616620707265686173682076616c7565206f7060448201527f65726174696f6e000000000000000000000000000000000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f556e6578706563746564206c6561662070726568617368206b6579206f70657260448201527f6174696f6e0000000000000000000000000000000000000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601e60248201527f556e6578706563746564206c6561662068617368206f7065726174696f6e00006044820152606490fd5b61223b846124fb565b15611ad95760405162461bcd60e51b815260206004820152601260248201527f6261642070726566697820696e206c65616600000000000000000000000000006044820152606490fd5b7f41449ff9000000000000000000000000000000000000000000000000000000005f5260045ffd5b918251511580156123b8575b61171c576122d260408401518451602086015191611901565b905f915b606085015180518410156123b05790611705846122f293610e77565b916123006060850151151590565b61230e575b600101916122d6565b60808401516020015163ffffffff1663ffffffff8116602011908161239e575b50156123055760405162461bcd60e51b8152602060048201526024808201527f496e76616c696420696e6e6572206f7065726174696f6e20286368696c645f7360448201527f697a6529000000000000000000000000000000000000000000000000000000006064820152608490fd5b6020915063ffffffff1610155f61232e565b509350915050565b505f6122b9565b9060078202918083046007149015171561119a57565b908051156124155760206123ef6124079361033393612448565b6123f7612612565b90604051948592848401906118ef565b908152038084520182610549565b7f93fc1cdc000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040513d5f823e3d90fd5b90612452816102af565b8061246157506103339061264a565b61246a816102af565b6001810361249b57505f612486602092604051918280926118ef565b039060025afa15612496575f5190565b61243d565b806124a76002926102af565b036124b6576020815191012090565b60405162461bcd60e51b815260206004820152601a60248201527f556e737570706f727465642068617368206f7065726174696f6e0000000000006044820152606490fd5b5f6125058261269e565b919060070b126125cd5761251a5f91836126ce565b919060070b126125885761252f5f91836126ce565b919060070b1261254357610333915161119f565b60405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642076657273696f6e20696e206c6561662070726566697800006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642073697a6520696e206c6561662070726566697800000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642068656967687420696e206c656166207072656669780000006044820152606490fd5b6040517f2000000000000000000000000000000000000000000000000000000000000000602082015260018152610333602182610549565b8051906020821061265e5760209150015190565b60200151906020036020811161119a577f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116810361119a5760031b1c90565b5f6126a8916127d6565b91906001677fffffffffffffff82821c1660070b91166126c6579190565b1960070b9190565b906126a8916127d6565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff809116019063ffffffff821161119a57565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0009116019063ffffffff821161119a57565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe000009116019063ffffffff821161119a57565b63ffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000009116019063ffffffff821161119a57565b9067ffffffffffffffff8091169116019067ffffffffffffffff821161119a57565b91908251811015612ca2576127ec81845161119f565b15612c055760ff61280961280361126f8487611225565b60f81c90565b1692608084101561281e575061033390611856565b9092600a61282d85845161119f565b118015612c42575b15612b4957612843906126d8565b608061287460ff61286261280361126f61285c8a611856565b88611225565b1692600784901b63ffffff8016611ccc565b9110612b38576128839061270f565b60806128ae60ff61289c61280361126f61285c8a611864565b1692600e84901b63ffffc00016611ccc565b9110612b27576128bd90612746565b60806128e860ff6128d661280361126f61285c8a611872565b1692601584901b63ffe0000016611ccc565b9110612b1057611c7d6128fa9161277d565b9060ff61291561280361126f61290f88611880565b85611225565b1660808110612aee57612927906126d8565b608061294060ff61286261280361126f61285c8b61188e565b9110612acc5761294f9061270f565b608061296860ff61289c61280361126f61285c8b61189c565b9110612aaa5761297790612746565b9160806129a360ff61299161280361126f61285c8b6118aa565b1694601586901b63ffe0000016611ccc565b9310612a89576129cc6129bc611c7d6129d2949561277d565b601c1b67fffffffff00000001690565b906127b4565b9060ff6129e761280361126f61290f886118b8565b1660808110612a6757612a1960ff61286261280361126f612a096002966126d8565b96612a138b6118c6565b90611225565b9110612a47577f473b8722000000000000000000000000000000000000000000000000000000005f5260045ffd5b61033391612a619160381b67ff00000000000000166129cc565b926118d4565b61033392612a8392509060381b67ff00000000000000166129cc565b926118c6565b61033392612aa49250601c1b670ffffffff0000000166129cc565b926118b8565b61033392612ac6925090601c1b670ffffffff0000000166129cc565b926118aa565b61033392612ae8925090601c1b670ffffffff0000000166129cc565b9261189c565b61033392612b0a925090601c1b67fffffffff0000000166129cc565b9261188e565b9263ffffffff9150612b2190611880565b92169190565b9263ffffffff9150612b2190611872565b9263ffffffff9150612b2190611864565b5091905f92612b5983825161119f565b600a811015612c3957925b5f5b848110612b95577f473b8722000000000000000000000000000000000000000000000000000000005f5260045ffd5b60ff612bb061280361126f612baa85876118e2565b87611225565b96612bd0612bbd846123bf565b607f8a16901b67ffffffffffffffff1690565b179616607f811115612be55750600101612b66565b92508093945060099150149081612c2d575b50612c055761033390611856565b7f473b8722000000000000000000000000000000000000000000000000000000005f5260045ffd5b6002915010155f612bf7565b50600a92612b64565b507f80000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000612c9b61126f612c95865161118c565b86611225565b1610612835565b7f01da1572000000000000000000000000000000000000000000000000000000005f5260045ffdfea164736f6c634300081c000a",
}

// ContractMembershipABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMembershipMetaData.ABI instead.
var ContractMembershipABI = ContractMembershipMetaData.ABI

// ContractMembershipBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMembershipMetaData.Bin instead.
var ContractMembershipBin = ContractMembershipMetaData.Bin

// DeployContractMembership deploys a new Ethereum contract, binding an instance of ContractMembership to it.
func DeployContractMembership(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ContractMembership, error) {
	parsed, err := ContractMembershipMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractMembershipBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractMembership{ContractMembershipCaller: ContractMembershipCaller{contract: contract}, ContractMembershipTransactor: ContractMembershipTransactor{contract: contract}, ContractMembershipFilterer: ContractMembershipFilterer{contract: contract}}, nil
}

// ContractMembership is an auto generated Go binding around an Ethereum contract.
type ContractMembership struct {
	ContractMembershipCaller     // Read-only binding to the contract
	ContractMembershipTransactor // Write-only binding to the contract
	ContractMembershipFilterer   // Log filterer for contract events
}

// ContractMembershipCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractMembershipCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMembershipTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractMembershipTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMembershipFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractMembershipFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMembershipSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractMembershipSession struct {
	Contract     *ContractMembership // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractMembershipCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractMembershipCallerSession struct {
	Contract *ContractMembershipCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ContractMembershipTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractMembershipTransactorSession struct {
	Contract     *ContractMembershipTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ContractMembershipRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractMembershipRaw struct {
	Contract *ContractMembership // Generic contract binding to access the raw methods on
}

// ContractMembershipCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractMembershipCallerRaw struct {
	Contract *ContractMembershipCaller // Generic read-only contract binding to access the raw methods on
}

// ContractMembershipTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractMembershipTransactorRaw struct {
	Contract *ContractMembershipTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractMembership creates a new instance of ContractMembership, bound to a specific deployed contract.
func NewContractMembership(address common.Address, backend bind.ContractBackend) (*ContractMembership, error) {
	contract, err := bindContractMembership(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractMembership{ContractMembershipCaller: ContractMembershipCaller{contract: contract}, ContractMembershipTransactor: ContractMembershipTransactor{contract: contract}, ContractMembershipFilterer: ContractMembershipFilterer{contract: contract}}, nil
}

// NewContractMembershipCaller creates a new read-only instance of ContractMembership, bound to a specific deployed contract.
func NewContractMembershipCaller(address common.Address, caller bind.ContractCaller) (*ContractMembershipCaller, error) {
	contract, err := bindContractMembership(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipCaller{contract: contract}, nil
}

// NewContractMembershipTransactor creates a new write-only instance of ContractMembership, bound to a specific deployed contract.
func NewContractMembershipTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractMembershipTransactor, error) {
	contract, err := bindContractMembership(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipTransactor{contract: contract}, nil
}

// NewContractMembershipFilterer creates a new log filterer instance of ContractMembership, bound to a specific deployed contract.
func NewContractMembershipFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractMembershipFilterer, error) {
	contract, err := bindContractMembership(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipFilterer{contract: contract}, nil
}

// bindContractMembership binds a generic wrapper to an already deployed contract.
func bindContractMembership(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMembershipMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMembership *ContractMembershipRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMembership.Contract.ContractMembershipCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMembership *ContractMembershipRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMembership.Contract.ContractMembershipTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMembership *ContractMembershipRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMembership.Contract.ContractMembershipTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMembership *ContractMembershipCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMembership.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMembership *ContractMembershipTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMembership.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMembership *ContractMembershipTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMembership.Contract.contract.Transact(opts, method, params...)
}

// CompareBytes is a free data retrieval call binding the contract method 0xd259183d.
//
// Solidity: function compareBytes(bytes a, bytes b) pure returns(int8)
func (_ContractMembership *ContractMembershipCaller) CompareBytes(opts *bind.CallOpts, a []byte, b []byte) (int8, error) {
	var out []interface{}
	err := _ContractMembership.contract.Call(opts, &out, "compareBytes", a, b)

	if err != nil {
		return *new(int8), err
	}

	out0 := *abi.ConvertType(out[0], new(int8)).(*int8)

	return out0, err

}

// CompareBytes is a free data retrieval call binding the contract method 0xd259183d.
//
// Solidity: function compareBytes(bytes a, bytes b) pure returns(int8)
func (_ContractMembership *ContractMembershipSession) CompareBytes(a []byte, b []byte) (int8, error) {
	return _ContractMembership.Contract.CompareBytes(&_ContractMembership.CallOpts, a, b)
}

// CompareBytes is a free data retrieval call binding the contract method 0xd259183d.
//
// Solidity: function compareBytes(bytes a, bytes b) pure returns(int8)
func (_ContractMembership *ContractMembershipCallerSession) CompareBytes(a []byte, b []byte) (int8, error) {
	return _ContractMembership.Contract.CompareBytes(&_ContractMembership.CallOpts, a, b)
}

// GetSlice is a free data retrieval call binding the contract method 0x5bf145a2.
//
// Solidity: function getSlice(bytes array, uint256 from, uint256 to) view returns(bytes)
func (_ContractMembership *ContractMembershipCaller) GetSlice(opts *bind.CallOpts, array []byte, from *big.Int, to *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ContractMembership.contract.Call(opts, &out, "getSlice", array, from, to)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetSlice is a free data retrieval call binding the contract method 0x5bf145a2.
//
// Solidity: function getSlice(bytes array, uint256 from, uint256 to) view returns(bytes)
func (_ContractMembership *ContractMembershipSession) GetSlice(array []byte, from *big.Int, to *big.Int) ([]byte, error) {
	return _ContractMembership.Contract.GetSlice(&_ContractMembership.CallOpts, array, from, to)
}

// GetSlice is a free data retrieval call binding the contract method 0x5bf145a2.
//
// Solidity: function getSlice(bytes array, uint256 from, uint256 to) view returns(bytes)
func (_ContractMembership *ContractMembershipCallerSession) GetSlice(array []byte, from *big.Int, to *big.Int) ([]byte, error) {
	return _ContractMembership.Contract.GetSlice(&_ContractMembership.CallOpts, array, from, to)
}

// IavlSpec is a free data retrieval call binding the contract method 0xf7b075a8.
//
// Solidity: function iavlSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipCaller) IavlSpec(opts *bind.CallOpts) (IMembershipMsgsProofSpec, error) {
	var out []interface{}
	err := _ContractMembership.contract.Call(opts, &out, "iavlSpec")

	if err != nil {
		return *new(IMembershipMsgsProofSpec), err
	}

	out0 := *abi.ConvertType(out[0], new(IMembershipMsgsProofSpec)).(*IMembershipMsgsProofSpec)

	return out0, err

}

// IavlSpec is a free data retrieval call binding the contract method 0xf7b075a8.
//
// Solidity: function iavlSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipSession) IavlSpec() (IMembershipMsgsProofSpec, error) {
	return _ContractMembership.Contract.IavlSpec(&_ContractMembership.CallOpts)
}

// IavlSpec is a free data retrieval call binding the contract method 0xf7b075a8.
//
// Solidity: function iavlSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipCallerSession) IavlSpec() (IMembershipMsgsProofSpec, error) {
	return _ContractMembership.Contract.IavlSpec(&_ContractMembership.CallOpts)
}

// TendermintSpec is a free data retrieval call binding the contract method 0x002cf8c0.
//
// Solidity: function tendermintSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipCaller) TendermintSpec(opts *bind.CallOpts) (IMembershipMsgsProofSpec, error) {
	var out []interface{}
	err := _ContractMembership.contract.Call(opts, &out, "tendermintSpec")

	if err != nil {
		return *new(IMembershipMsgsProofSpec), err
	}

	out0 := *abi.ConvertType(out[0], new(IMembershipMsgsProofSpec)).(*IMembershipMsgsProofSpec)

	return out0, err

}

// TendermintSpec is a free data retrieval call binding the contract method 0x002cf8c0.
//
// Solidity: function tendermintSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipSession) TendermintSpec() (IMembershipMsgsProofSpec, error) {
	return _ContractMembership.Contract.TendermintSpec(&_ContractMembership.CallOpts)
}

// TendermintSpec is a free data retrieval call binding the contract method 0x002cf8c0.
//
// Solidity: function tendermintSpec() pure returns((uint8,bool,(uint8,uint8,uint8,bytes),bool,(uint32[],uint32,uint32,uint32,bytes,uint8),uint32,uint32,bool))
func (_ContractMembership *ContractMembershipCallerSession) TendermintSpec() (IMembershipMsgsProofSpec, error) {
	return _ContractMembership.Contract.TendermintSpec(&_ContractMembership.CallOpts)
}

// Membership is a paid mutator transaction binding the contract method 0x13542b7a.
//
// Solidity: function membership(bytes32 appHash, (bytes[],bytes32)[] kvPairs, ((uint8,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),(bytes,bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[])))[])[] merkleProofs) returns((bytes32,(bytes[],bytes32)[]) output)
func (_ContractMembership *ContractMembershipTransactor) Membership(opts *bind.TransactOpts, appHash [32]byte, kvPairs []IMembershipMsgsKVPair, merkleProofs []IMembershipMsgsMerkleProof) (*types.Transaction, error) {
	return _ContractMembership.contract.Transact(opts, "membership", appHash, kvPairs, merkleProofs)
}

// Membership is a paid mutator transaction binding the contract method 0x13542b7a.
//
// Solidity: function membership(bytes32 appHash, (bytes[],bytes32)[] kvPairs, ((uint8,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),(bytes,bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[])))[])[] merkleProofs) returns((bytes32,(bytes[],bytes32)[]) output)
func (_ContractMembership *ContractMembershipSession) Membership(appHash [32]byte, kvPairs []IMembershipMsgsKVPair, merkleProofs []IMembershipMsgsMerkleProof) (*types.Transaction, error) {
	return _ContractMembership.Contract.Membership(&_ContractMembership.TransactOpts, appHash, kvPairs, merkleProofs)
}

// Membership is a paid mutator transaction binding the contract method 0x13542b7a.
//
// Solidity: function membership(bytes32 appHash, (bytes[],bytes32)[] kvPairs, ((uint8,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),(bytes,bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[]),bool,(bytes,bytes32,(uint8,uint8,uint8,bytes),(uint8,bytes,bytes)[])))[])[] merkleProofs) returns((bytes32,(bytes[],bytes32)[]) output)
func (_ContractMembership *ContractMembershipTransactorSession) Membership(appHash [32]byte, kvPairs []IMembershipMsgsKVPair, merkleProofs []IMembershipMsgsMerkleProof) (*types.Transaction, error) {
	return _ContractMembership.Contract.Membership(&_ContractMembership.TransactOpts, appHash, kvPairs, merkleProofs)
}

// ContractMembershipMembershipVerifiedIterator is returned from FilterMembershipVerified and is used to iterate over the raw logs and unpacked data for MembershipVerified events raised by the ContractMembership contract.
type ContractMembershipMembershipVerifiedIterator struct {
	Event *ContractMembershipMembershipVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMembershipMembershipVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMembershipMembershipVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMembershipMembershipVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMembershipMembershipVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMembershipMembershipVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMembershipMembershipVerified represents a MembershipVerified event raised by the ContractMembership contract.
type ContractMembershipMembershipVerified struct {
	CommitmentRoot [32]byte
	PairsCount     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterMembershipVerified is a free log retrieval operation binding the contract event 0x14c3312724f47bdf554a477e7a78122467e13c3f6d0e07ce1ef28a65f231c1d9.
//
// Solidity: event MembershipVerified(bytes32 indexed commitmentRoot, uint256 pairsCount)
func (_ContractMembership *ContractMembershipFilterer) FilterMembershipVerified(opts *bind.FilterOpts, commitmentRoot [][32]byte) (*ContractMembershipMembershipVerifiedIterator, error) {

	var commitmentRootRule []interface{}
	for _, commitmentRootItem := range commitmentRoot {
		commitmentRootRule = append(commitmentRootRule, commitmentRootItem)
	}

	logs, sub, err := _ContractMembership.contract.FilterLogs(opts, "MembershipVerified", commitmentRootRule)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipMembershipVerifiedIterator{contract: _ContractMembership.contract, event: "MembershipVerified", logs: logs, sub: sub}, nil
}

// WatchMembershipVerified is a free log subscription operation binding the contract event 0x14c3312724f47bdf554a477e7a78122467e13c3f6d0e07ce1ef28a65f231c1d9.
//
// Solidity: event MembershipVerified(bytes32 indexed commitmentRoot, uint256 pairsCount)
func (_ContractMembership *ContractMembershipFilterer) WatchMembershipVerified(opts *bind.WatchOpts, sink chan<- *ContractMembershipMembershipVerified, commitmentRoot [][32]byte) (event.Subscription, error) {

	var commitmentRootRule []interface{}
	for _, commitmentRootItem := range commitmentRoot {
		commitmentRootRule = append(commitmentRootRule, commitmentRootItem)
	}

	logs, sub, err := _ContractMembership.contract.WatchLogs(opts, "MembershipVerified", commitmentRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMembershipMembershipVerified)
				if err := _ContractMembership.contract.UnpackLog(event, "MembershipVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMembershipVerified is a log parse operation binding the contract event 0x14c3312724f47bdf554a477e7a78122467e13c3f6d0e07ce1ef28a65f231c1d9.
//
// Solidity: event MembershipVerified(bytes32 indexed commitmentRoot, uint256 pairsCount)
func (_ContractMembership *ContractMembershipFilterer) ParseMembershipVerified(log types.Log) (*ContractMembershipMembershipVerified, error) {
	event := new(ContractMembershipMembershipVerified)
	if err := _ContractMembership.contract.UnpackLog(event, "MembershipVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMembershipNonMembershipVerifiedIterator is returned from FilterNonMembershipVerified and is used to iterate over the raw logs and unpacked data for NonMembershipVerified events raised by the ContractMembership contract.
type ContractMembershipNonMembershipVerifiedIterator struct {
	Event *ContractMembershipNonMembershipVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMembershipNonMembershipVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMembershipNonMembershipVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMembershipNonMembershipVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMembershipNonMembershipVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMembershipNonMembershipVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMembershipNonMembershipVerified represents a NonMembershipVerified event raised by the ContractMembership contract.
type ContractMembershipNonMembershipVerified struct {
	CommitmentRoot [32]byte
	Key            [][]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterNonMembershipVerified is a free log retrieval operation binding the contract event 0x6d496ee75e8a922548b36e0a6080961577444d51d6a55179aa3e986fcd801a3d.
//
// Solidity: event NonMembershipVerified(bytes32 indexed commitmentRoot, bytes[] key)
func (_ContractMembership *ContractMembershipFilterer) FilterNonMembershipVerified(opts *bind.FilterOpts, commitmentRoot [][32]byte) (*ContractMembershipNonMembershipVerifiedIterator, error) {

	var commitmentRootRule []interface{}
	for _, commitmentRootItem := range commitmentRoot {
		commitmentRootRule = append(commitmentRootRule, commitmentRootItem)
	}

	logs, sub, err := _ContractMembership.contract.FilterLogs(opts, "NonMembershipVerified", commitmentRootRule)
	if err != nil {
		return nil, err
	}
	return &ContractMembershipNonMembershipVerifiedIterator{contract: _ContractMembership.contract, event: "NonMembershipVerified", logs: logs, sub: sub}, nil
}

// WatchNonMembershipVerified is a free log subscription operation binding the contract event 0x6d496ee75e8a922548b36e0a6080961577444d51d6a55179aa3e986fcd801a3d.
//
// Solidity: event NonMembershipVerified(bytes32 indexed commitmentRoot, bytes[] key)
func (_ContractMembership *ContractMembershipFilterer) WatchNonMembershipVerified(opts *bind.WatchOpts, sink chan<- *ContractMembershipNonMembershipVerified, commitmentRoot [][32]byte) (event.Subscription, error) {

	var commitmentRootRule []interface{}
	for _, commitmentRootItem := range commitmentRoot {
		commitmentRootRule = append(commitmentRootRule, commitmentRootItem)
	}

	logs, sub, err := _ContractMembership.contract.WatchLogs(opts, "NonMembershipVerified", commitmentRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMembershipNonMembershipVerified)
				if err := _ContractMembership.contract.UnpackLog(event, "NonMembershipVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNonMembershipVerified is a log parse operation binding the contract event 0x6d496ee75e8a922548b36e0a6080961577444d51d6a55179aa3e986fcd801a3d.
//
// Solidity: event NonMembershipVerified(bytes32 indexed commitmentRoot, bytes[] key)
func (_ContractMembership *ContractMembershipFilterer) ParseNonMembershipVerified(log types.Log) (*ContractMembershipNonMembershipVerified, error) {
	event := new(ContractMembershipNonMembershipVerified)
	if err := _ContractMembership.contract.UnpackLog(event, "NonMembershipVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
